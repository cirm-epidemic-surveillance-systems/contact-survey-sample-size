clear
close all

% Visualise some contact matrices constructed from the "continuous operator
% model" M(x,y) described in the Overleaf draft, with a continuous
% distribution of activity levels and different degrees of assortativity

% Model parameters

% Std. dev. in the log activity level distribution
Sigma = 0.4;

% Assortativity constant (in additon to Epsilon=0 and Epsilon=1 which will always
% be plotted)
eps_arr = 0:0.05:1;
eps_toPlot = [7, 21];

% Inverse width of assortativity kernel
ak_arr = 0:0.:10;
ak_toPlot = [11, 21];

% Number of bins to discretise and plot the contact matrix
nBins = 100;

na = length(eps_arr);
nb = length(ak_arr);



% Create a grid of nBins x values placed at the midpoint of each "bin"
dx = 1/nBins;
x = dx/2:dx:(1-dx/2);
nx = length(x);

% Calculate v as the inverse CDF of the log normal activity level distribution
v = logninv(x, 0, Sigma);

% Calculate approximate moments of the distribution
Ev = dx*sum(v);

% Define matrices of x and y values for calculating M(x,y)
[X, Y] = meshgrid(x, x);


% Proportionate mixing model matrix
M_PM = v'.*v/Ev;

% Calculate dominant eigenvalue for proportionate mixing
domEig_PM = eigs(M_PM, 1);

% Calculate the aggregate contacts for someone as a function of their
% activity class by summing columns of the matrix
aggCont_PM = dx*sum(M_PM, 1);
       

% Plot proportionate mixing matrix
h = figure(1);
h.Position = [     67         363        1096         592];
tiledlayout(2, 3, "TileSpacing", "compact")
tileInd = [1, 2, 3, 5, 6];
iMatrix = 1;
nexttile(tileInd(iMatrix));
imagesc(x, x, M_PM);
title('prop. mixing')
h = gca;
h.YDir = 'normal';
colorbar;
xlabel('activity level quantile of individual (x)')
ylabel('activity level quantile of contact (y)')



     

% Initialise array for dominant eigenvalue
domEig = zeros(na, nb);

% Calculate the fully assortative mixing model (epsilon=1) for each value of ak
for ia = 1:na
    eps = eps_arr(ia);
    for ib = 1:nb
        ak = ak_arr(ib);
            
        % Calculate the kernel as a fuction of Y-X
        %gk = exp(-(Y-X).^2/(2*ak^2));
        gk = exp(-ak*(Y-X).^2);
    
        % Calculate the product v(y)*g(y-x)
        C = v'.*gk;
    
        % Calculte denominator of equation for M
        den = dx*sum(C, 1);
    
        % Assortative mixing matrix
        M_AM = (1-eps)*M_PM + eps * v.*C./den;

        % Calculate dominant eigenvalue
        domEig(ia, ib) = eigs(M_AM, 1);

        % Calculate the aggregate contacts for someone as a function of their
        % activity class by summing columns of the matrix
        aggCont_AM = dx*sum(M_AM, 1);

        if ismember(ia, eps_toPlot) & ismember(ib, ak_toPlot)
            figure(1);
            iMatrix = iMatrix+1;
            nexttile(tileInd(iMatrix));
            imagesc(x, x, M_AM);
            title(sprintf('ass. mixing with eps = %.1f, a = %.1f', eps, ak))         
            h = gca;
            h.YDir = 'normal';
            colorbar;
            xlabel('activity level quantile of individual (x)')
            ylabel('activity level quantile of contact (y)')

            figure;
            plot(x, aggCont_PM, x, aggCont_AM)
            hold on 
            plot(x, v, '--')
            grid on
            xlabel('activity level quantile')
            ylabel('total contact rate')
            legend('PM', 'AM', 'log-norm dist', 'location', 'northwest')
            title('check total contact rates match the specified distribution')
        end
    end
end


figure(100);
%imagesc(ak_arr, eps_arr, domEig);
contourf(ak_arr, eps_arr, domEig);
h = gca;
h.YDir = 'normal';
colorbar;
xlabel('a')
ylabel('\epsilon')
title('dominant eigenvalue')
