---
title: "ContactMatrixSplit"
format: html
---


```{r}
library(tidyverse)

#supporting function for quantizing

MeasureMeanByContactQuantile<-function(contacts,N_quantiles){
  contacts |> 
    mutate(MeansByQuantile = ntile(X,N_quantiles)) |> 
    group_by(MeansByQuantile) |> 
    summarise(MeansByQuantile = mean(X)) |> 
    mutate(Quantile = row_number())->tmp
  return(tmp)
}

```


```{r}

GenerateProportionateMixingMatrix <-function(s){
  SumDegree = sum(s$MeansByQuantile)
  cross_join(s,s)|> 
    mutate(Product = MeansByQuantile.x*MeansByQuantile.y)|> 
    select(From = Quantile.x, To = Quantile.y,Product)|> 
    mutate(Product = Product/SumDegree)|> 
    rename(Weight = Product)->tmp
  
  return(tmp)
}
```

```{r}
GenerateFullyAssortativeMixingMatrix <-function(s){

  cross_join(s,s)|>
    rename(From = Quantile.x, To = Quantile.y)|> 
    mutate(Weight = ifelse(From == To, MeansByQuantile.x,0 )) |> 
    select(From,To,Weight)->tmp
return(tmp)    
}
```

```{r}
#wrapper function

GenerateMatrix<-function(sigma = 1,number_of_quantiles = 2, assort=1){
    #sigma is the normal distribution standard deviation
    #alpha is the amount of assortativity
    as_tibble(x=exp(rnorm(n=1000000))) |> 
      rename(X=value)-> normal_dist_test.df
    
    MeasureMeanByContactQuantile(normal_dist_test.df,number_of_quantiles)->s

    AssortativeMatrix<-GenerateFullyAssortativeMixingMatrix(s)
    ProportionateMatrix<-GenerateProportionateMixingMatrix(s)
    
    AssortativeMatrix
    ProportionateMatrix
    
    AssortativeMatrix |> 
      rename(Weight_Assortative=Weight) |> 
      mutate(Weight_Proportionate = ProportionateMatrix$Weight) |> 
      mutate(WeightCombined = assort*Weight_Assortative + (1-assort)*Weight_Proportionate) |> 
      select(From,To,WeightCombined) -> CombinedMatrix

return(CombinedMatrix)
}



GenerateMatrix(assort = 1,number_of_quantiles = 3)->M
# works
```

##Calculate the eigenvalues

```{r}
library(usedist)
MatrixToEigenvalue<-function(M,eigen_value = 1){
  #M is the matrix in long format, eigen_value is which eigenvalue to extract 
  #defaults to eigen_value = 1 for the dominant 
  M |> pivot_to_numeric_matrix(From, To, WeightCombined) |> 
    eigen()->decomp 
  tmp = decomp$values[eigen_value]
  return(tmp)  
}

MatrixToEigenvalue(M,eigen_value=1)
```


```{r}
library(purrr)
library(furrr)
plan(multisession, workers = 12)


MapToEigen<-function(assort = 1,number_of_quantiles = 3,eigen_value=1,beta = 1){
  GenerateMatrix(assort = assort,number_of_quantiles = number_of_quantiles)->M 
  M |> mutate(WeightCombined = WeightCombined*beta)
  MatrixToEigenvalue(M,eigen_value=eigen_value)->tmp
  return(tmp)
}

MapToEigen(assort = 1, number_of_quantiles = 3)

expand_grid(Assort = seq(0,1,0.1),Bins = seq(1,10,1))|> 
  mutate(tmp = map2(Assort,Bins, ~MapToEigen(assort = .x, number_of_quantiles = .y))) |> 
  unnest(tmp)->Output


Output |> 
  select(Assort,Bins,Eigenvalue=tmp) |> 
  mutate(Bins = as_factor(Bins))|> 
  ggplot(aes(x=Assort,y=Eigenvalue,colour = Bins))+
  geom_line()+
  geom_point()+
  xlab('Assortativity')
  
  
```
## Better figure



Scale of the issues
```{r}
library(cowplot)
expand_grid(Assort = seq(0,1,0.1),Bins = seq(1,100,1))|> 
  mutate(tmp = future_map2(Assort,Bins, ~MapToEigen(assort = .x, number_of_quantiles = .y))) |> 
  unnest(tmp)->Output

Output |> 
  select(Assort,Bins,Eigenvalue=tmp) |> 
  mutate(Bins = as_factor(Bins))|> 
  ggplot(aes(x=Assort,y=Eigenvalue,colour = Bins))+
  geom_line()+
  geom_point()+
  xlab('Assortativity')+
  theme_minimal_grid()


```

#Effect of R

```{r}

```

